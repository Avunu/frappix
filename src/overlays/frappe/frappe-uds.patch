diff --git a/frappe/__init__.py b/frappe/__init__.py
index ff953cce26..11b112a4be 100644
--- a/frappe/__init__.py
+++ b/frappe/__init__.py
@@ -338,6 +338,7 @@ def connect(site: str | None = None, db_name: str | None = None, set_admin_as_us
 	assert local.conf.db_password, "site must be fully initialized, db_password missing"
 
 	local.db = get_db(
+		socket=local.conf.db_socket,
 		host=local.conf.db_host,
 		port=local.conf.db_port,
 		user=local.conf.db_user or db_name,
@@ -363,6 +364,7 @@ def connect_replica() -> bool:
 		password = local.conf.replica_db_password
 
 	local.replica_db = get_db(
+		socket=None,
 		host=local.conf.replica_host,
 		port=port,
 		user=user,
@@ -425,6 +427,7 @@ def get_site_config(sites_path: str | None = None, site_path: str | None = None)
 		os.environ.get("FRAPPE_REDIS_CACHE") or config.get("redis_cache") or "redis://127.0.0.1:13311"
 	)
 	config["db_type"] = os.environ.get("FRAPPE_DB_TYPE") or config.get("db_type") or "mariadb"
+	config["db_socket"] = os.environ.get("FRAPPE_DB_SOCKET") or config.get("db_socket") or None
 	config["db_host"] = os.environ.get("FRAPPE_DB_HOST") or config.get("db_host") or "127.0.0.1"
 	config["db_port"] = (
 		os.environ.get("FRAPPE_DB_PORT") or config.get("db_port") or db_default_ports(config["db_type"])
diff --git a/frappe/commands/site.py b/frappe/commands/site.py
index 832364ab92..d07b069c2b 100644
--- a/frappe/commands/site.py
+++ b/frappe/commands/site.py
@@ -30,11 +30,25 @@ from frappe.exceptions import SiteNotSpecifiedError
 	help='Root username for MariaDB or PostgreSQL, Default is "root"',
 )
 @click.option("--db-root-password", "--mariadb-root-password", help="Root password for MariaDB or PostgreSQL")
+@click.option(
+	"--db-socket",
+	"--mariadb-db-socket",
+	envvar="MYSQL_UNIX_PORT",
+	help="Database socket for MariaDB or PostgreSQL",
+)
 @click.option(
 	"--no-mariadb-socket",
 	is_flag=True,
 	default=False,
-	help="Set MariaDB host to % and use TCP/IP Socket instead of using the UNIX Socket",
+	help="DEPRECATED: Set MariaDB host to % and use TCP/IP Socket instead of using the UNIX Socket",
+)
+@click.option(
+	"--mariadb-user-host-login-scope",
+	help=(
+		"Set the mariadb host for the user login scope if you don't want to use the current host as login "
+		"scope which typically is ''@'localhost' - may be used when initializing a user on a remote host. "
+		"See the mariadb docs on account names for more info."
+	),
 )
 @click.option("--admin-password", help="Administrator password for new site", default=None)
 @click.option("--verbose", is_flag=True, default=False, help="Verbose")
@@ -57,10 +71,12 @@ def new_site(
 	source_sql=None,
 	force=None,
 	no_mariadb_socket=False,
+	mariadb_user_host_login_scope=False,
 	install_app=None,
 	db_name=None,
 	db_password=None,
 	db_type=None,
+	db_socket=None,
 	db_host=None,
 	db_port=None,
 	db_user=None,
@@ -70,6 +86,17 @@ def new_site(
 	"Create a new site"
 	from frappe.installer import _new_site
 
+	if no_mariadb_socket:
+		click.secho(
+			"--no-mariadb-socket is DEPRECATED; "
+			"use --mariadb-user-host-login-scope='%' (wildcard) or --mariadb-user-host-login-scope=<myhostscope>, instead. "
+			"The name of this option was misleading: it had nothing to do with sockets.",
+			fg="yellow",
+		)
+		frappe.flags.mariadb_user_host_login_scope = "%"
+	if mariadb_user_host_login_scope:
+		frappe.flags.mariadb_user_host_login_scope = mariadb_user_host_login_scope
+
 	frappe.init(site=site, new_site=True)
 
 	_new_site(
@@ -82,9 +109,9 @@ def new_site(
 		install_apps=install_app,
 		source_sql=source_sql,
 		force=force,
-		no_mariadb_socket=no_mariadb_socket,
 		db_password=db_password,
 		db_type=db_type,
+		db_socket=db_socket,
 		db_host=db_host,
 		db_port=db_port,
 		db_user=db_user,
diff --git a/frappe/commands/utils.py b/frappe/commands/utils.py
index e4b4118c37..0fa3d9c9ee 100644
--- a/frappe/commands/utils.py
+++ b/frappe/commands/utils.py
@@ -516,6 +516,7 @@ def _enter_console(extra_args=None):
 	from frappe.database import get_command
 
 	bin, args, bin_name = get_command(
+		socket=frappe.conf.db_socket,
 		host=frappe.conf.db_host,
 		port=frappe.conf.db_port,
 		user=frappe.conf.db_name,
diff --git a/frappe/database/__init__.py b/frappe/database/__init__.py
index 12348e2f99..fd59452c97 100644
--- a/frappe/database/__init__.py
+++ b/frappe/database/__init__.py
@@ -8,7 +8,7 @@ from shutil import which
 from frappe.database.database import savepoint
 
 
-def setup_database(force, verbose=None, no_mariadb_socket=False):
+def setup_database(force, verbose=None):
 	import frappe
 
 	if frappe.conf.db_type == "postgres":
@@ -18,9 +18,7 @@ def setup_database(force, verbose=None, no_mariadb_socket=False):
 	else:
 		import frappe.database.mariadb.setup_db
 
-		return frappe.database.mariadb.setup_db.setup_database(
-			force, verbose, no_mariadb_socket=no_mariadb_socket
-		)
+		return frappe.database.mariadb.setup_db.setup_database(force, verbose)
 
 
 def bootstrap_database(verbose=None, source_sql=None):
@@ -49,20 +47,26 @@ def drop_user_and_database(db_name, db_user):
 		return frappe.database.mariadb.setup_db.drop_user_and_database(db_name, db_user)
 
 
-def get_db(host=None, user=None, password=None, port=None, cur_db_name=None):
+def get_db(socket=None, host=None, user=None, password=None, port=None, cur_db_name=None):
 	import frappe
 
 	if frappe.conf.db_type == "postgres":
 		import frappe.database.postgres.database
 
-		return frappe.database.postgres.database.PostgresDatabase(host, user, password, port, cur_db_name)
+		return frappe.database.postgres.database.PostgresDatabase(
+			socket, host, user, password, port, cur_db_name
+		)
 	else:
 		import frappe.database.mariadb.database
 
-		return frappe.database.mariadb.database.MariaDBDatabase(host, user, password, port, cur_db_name)
+		return frappe.database.mariadb.database.MariaDBDatabase(
+			socket, host, user, password, port, cur_db_name
+		)
 
 
-def get_command(host=None, port=None, user=None, password=None, db_name=None, extra=None, dump=False):
+def get_command(
+	socket=None, host=None, port=None, user=None, password=None, db_name=None, extra=None, dump=False
+):
 	import frappe
 
 	if frappe.conf.db_type == "postgres":
@@ -71,7 +75,11 @@ def get_command(host=None, port=None, user=None, password=None, db_name=None, ex
 		else:
 			bin, bin_name = which("psql"), "psql"
 
-		if password:
+		if socket and password:
+			conn_string = f"postgresql://{user}:{password}@/{db_name}?host={socket}"
+		elif socket:
+			conn_string = f"postgresql://{user}@/{db_name}?host={socket}"
+		elif password:
 			conn_string = f"postgresql://{user}:{password}@{host}:{port}/{db_name}"
 		else:
 			conn_string = f"postgresql://{user}@{host}:{port}/{db_name}"
@@ -87,11 +95,12 @@ def get_command(host=None, port=None, user=None, password=None, db_name=None, ex
 		else:
 			bin, bin_name = which("mariadb") or which("mysql"), "mariadb"
 
-		command = [
-			f"--user={user}",
-			f"--host={host}",
-			f"--port={port}",
-		]
+		command = [f"--user={user}"]
+		if socket:
+			command.append(f"--socket={socket}")
+		elif host and port:
+			command.append(f"--host={host}")
+			command.append(f"--port={port}")
 
 		if password:
 			command.append(f"--password={password}")
diff --git a/frappe/database/database.py b/frappe/database/database.py
index 83f8e5bbcf..05327ab39e 100644
--- a/frappe/database/database.py
+++ b/frappe/database/database.py
@@ -69,6 +69,7 @@ class Database:
 
 	def __init__(
 		self,
+		socket=None,
 		host=None,
 		user=None,
 		password=None,
@@ -76,6 +77,7 @@ class Database:
 		cur_db_name=None,
 	):
 		self.setup_type_map()
+		self.socket = socket
 		self.host = host
 		self.port = port
 		self.user = user
diff --git a/frappe/database/db_manager.py b/frappe/database/db_manager.py
index ef399aac6c..fd538e660c 100644
--- a/frappe/database/db_manager.py
+++ b/frappe/database/db_manager.py
@@ -70,6 +70,7 @@ class DbManager:
 			source = ["<", source]
 
 		bin, args, bin_name = get_command(
+			socket=frappe.conf.db_socket,
 			host=frappe.conf.db_host,
 			port=frappe.conf.db_port,
 			user=user,
diff --git a/frappe/database/mariadb/database.py b/frappe/database/mariadb/database.py
index 908e7bb479..eb2a6778ec 100644
--- a/frappe/database/mariadb/database.py
+++ b/frappe/database/mariadb/database.py
@@ -116,9 +116,7 @@ class MariaDBConnectionUtil:
 
 	def get_connection_settings(self) -> dict:
 		conn_settings = {
-			"host": self.host,
 			"user": self.user,
-			"password": self.password,
 			"conv": self.CONVERSION_MAP,
 			"charset": "utf8mb4",
 			"use_unicode": True,
@@ -127,8 +125,15 @@ class MariaDBConnectionUtil:
 		if self.cur_db_name:
 			conn_settings["database"] = self.cur_db_name
 
-		if self.port:
-			conn_settings["port"] = int(self.port)
+		if self.socket:
+			conn_settings["unix_socket"] = self.socket
+		else:
+			conn_settings["host"] = self.host
+			if self.port:
+				conn_settings["port"] = int(self.port)
+
+		if self.password:
+			conn_settings["password"] = self.password
 
 		if frappe.conf.local_infile:
 			conn_settings["local_infile"] = frappe.conf.local_infile
diff --git a/frappe/database/mariadb/setup_db.py b/frappe/database/mariadb/setup_db.py
index 96e80e741c..152d16c649 100644
--- a/frappe/database/mariadb/setup_db.py
+++ b/frappe/database/mariadb/setup_db.py
@@ -23,7 +23,7 @@ def get_mariadb_version(version_string: str = ""):
 	return version.rsplit(".", 1)
 
 
-def setup_database(force, verbose, no_mariadb_socket=False):
+def setup_database(force, verbose):
 	frappe.local.session = frappe._dict({"user": "Administrator"})
 
 	db_user = frappe.conf.db_user
@@ -31,8 +31,9 @@ def setup_database(force, verbose, no_mariadb_socket=False):
 	root_conn = get_root_connection()
 	dbman = DbManager(root_conn)
 	dbman_kwargs = {}
-	if no_mariadb_socket:
-		dbman_kwargs["host"] = "%"
+
+	if frappe.flags.maridab_user_host_login_scope is not None:
+		dbman_kwargs["host"] = frappe.flags.maridab_user_host_login_scope
 
 	dbman.create_user(db_user, frappe.conf.db_password, **dbman_kwargs)
 	if verbose:
@@ -160,10 +161,11 @@ def get_root_connection():
 				frappe.conf.get("root_login") or input("Enter mysql super user [root]: ") or "root"
 			)
 
-		if not frappe.flags.root_password:
+		if not frappe.flags.root_password and not frappe.conf.db_socket:
 			frappe.flags.root_password = frappe.conf.get("root_password") or getpass("MySQL root password: ")
 
 		frappe.local.flags.root_connection = frappe.database.get_db(
+			socket=frappe.conf.db_socket,
 			host=frappe.conf.db_host,
 			port=frappe.conf.db_port,
 			user=frappe.flags.root_login,
diff --git a/frappe/database/postgres/database.py b/frappe/database/postgres/database.py
index 003455b5dd..4dbc761912 100644
--- a/frappe/database/postgres/database.py
+++ b/frappe/database/postgres/database.py
@@ -163,10 +163,12 @@ class PostgresDatabase(PostgresExceptionUtil, Database):
 		conn_settings = {
 			"dbname": self.cur_db_name,
 			"user": self.user,
-			"host": self.host,
-			"password": self.password,
+			# libpg defaults to default socket if not specified
+			"host": self.host or self.socket,
 		}
-		if self.port:
+		if self.password:
+			conn_settings["password"] = self.password
+		if not self.socket and self.port:
 			conn_settings["port"] = self.port
 
 		conn = psycopg2.connect(**conn_settings)
diff --git a/frappe/database/postgres/setup_db.py b/frappe/database/postgres/setup_db.py
index 89e9f513aa..272dfdc453 100644
--- a/frappe/database/postgres/setup_db.py
+++ b/frappe/database/postgres/setup_db.py
@@ -68,12 +68,13 @@ def get_root_connection():
 				frappe.conf.get("root_login") or input("Enter postgres super user [postgres]: ") or "postgres"
 			)
 
-		if not frappe.flags.root_password:
+		if not frappe.flags.root_password and not frappe.conf.db_socket:
 			frappe.flags.root_password = frappe.conf.get("root_password") or getpass(
 				"Postgres super user password: "
 			)
 
 		frappe.local.flags.root_connection = frappe.database.get_db(
+			socket=frappe.conf.db_socket,
 			host=frappe.conf.db_host,
 			port=frappe.conf.db_port,
 			user=frappe.flags.root_login,
diff --git a/frappe/installer.py b/frappe/installer.py
index feeee06df9..5c2f931b51 100644
--- a/frappe/installer.py
+++ b/frappe/installer.py
@@ -45,10 +45,10 @@ def _new_site(
 	install_apps=None,
 	source_sql=None,
 	force=False,
-	no_mariadb_socket=False,
 	reinstall=False,
 	db_password=None,
 	db_type=None,
+	db_socket=None,
 	db_host=None,
 	db_port=None,
 	db_user=None,
@@ -62,10 +62,6 @@ def _new_site(
 		print(f"Site {site} already exists")
 		sys.exit(1)
 
-	if no_mariadb_socket and db_type != "mariadb":
-		print("--no-mariadb-socket requires db_type to be set to mariadb.")
-		sys.exit(1)
-
 	frappe.init(site=site)
 
 	if not db_name:
@@ -98,10 +94,10 @@ def _new_site(
 			reinstall=reinstall,
 			db_password=db_password,
 			db_type=db_type,
+			db_socket=db_socket,
 			db_host=db_host,
 			db_port=db_port,
 			db_user=db_user,
-			no_mariadb_socket=no_mariadb_socket,
 			setup=setup_db,
 		)
 
@@ -135,10 +131,10 @@ def install_db(
 	reinstall=False,
 	db_password=None,
 	db_type=None,
+	db_socket=None,
 	db_host=None,
 	db_port=None,
 	db_user=None,
-	no_mariadb_socket=False,
 	setup=True,
 ):
 	import frappe.database
@@ -157,6 +153,7 @@ def install_db(
 		site_config=site_config,
 		db_password=db_password,
 		db_type=db_type,
+		db_socket=db_socket,
 		db_host=db_host,
 		db_port=db_port,
 		db_user=db_user,
@@ -167,7 +164,7 @@ def install_db(
 	frappe.flags.root_password = root_password
 
 	if setup:
-		setup_database(force, verbose, no_mariadb_socket)
+		setup_database(force, verbose)
 
 	bootstrap_database(
 		verbose=verbose,
@@ -538,6 +535,7 @@ def make_conf(
 	db_password=None,
 	site_config=None,
 	db_type=None,
+	db_socket=None,
 	db_host=None,
 	db_port=None,
 	db_user=None,
@@ -548,6 +546,7 @@ def make_conf(
 		db_password,
 		site_config,
 		db_type=db_type,
+		db_socket=db_socket,
 		db_host=db_host,
 		db_port=db_port,
 		db_user=db_user,
@@ -562,6 +561,7 @@ def make_site_config(
 	db_password=None,
 	site_config=None,
 	db_type=None,
+	db_socket=None,
 	db_host=None,
 	db_port=None,
 	db_user=None,
@@ -576,6 +576,9 @@ def make_site_config(
 			if db_type:
 				site_config["db_type"] = db_type
 
+			if db_socket:
+				site_config["db_socket"] = db_socket
+
 			if db_host:
 				site_config["db_host"] = db_host
 
diff --git a/frappe/integrations/offsite_backup_utils.py b/frappe/integrations/offsite_backup_utils.py
index 8cd29d5ecc..f16eabe748 100644
--- a/frappe/integrations/offsite_backup_utils.py
+++ b/frappe/integrations/offsite_backup_utils.py
@@ -49,6 +49,7 @@ def get_latest_backup_file(with_files=False):
 		frappe.conf.db_name,
 		frappe.conf.db_user,
 		frappe.conf.db_password,
+		db_socket=frappe.conf.db_socket,
 		db_host=frappe.conf.db_host,
 		db_port=frappe.conf.db_port,
 		db_type=frappe.conf.db_type,
@@ -107,6 +108,7 @@ def generate_files_backup():
 		frappe.conf.db_name,
 		frappe.conf.db_user,
 		frappe.conf.db_password,
+		db_socket=frappe.conf.db_socket,
 		db_host=frappe.conf.db_host,
 		db_port=frappe.conf.db_port,
 		db_type=frappe.conf.db_type,
diff --git a/frappe/tests/test_commands.py b/frappe/tests/test_commands.py
index 7754903ed3..2605fd39a2 100644
--- a/frappe/tests/test_commands.py
+++ b/frappe/tests/test_commands.py
@@ -681,6 +681,7 @@ class TestBackups(BaseTestCommands):
 			frappe.conf.db_name,
 			frappe.conf.db_name,
 			frappe.conf.db_password + "INCORRECT PASSWORD",
+			db_socket=frappe.conf.db_socket,
 			db_host=frappe.conf.db_host,
 			db_port=frappe.conf.db_port,
 			db_type=frappe.conf.db_type,
diff --git a/frappe/utils/backups.py b/frappe/utils/backups.py
index fa93f6d6cd..d4cfec663e 100644
--- a/frappe/utils/backups.py
+++ b/frappe/utils/backups.py
@@ -47,6 +47,7 @@ class BackupGenerator:
 		backup_path_db=None,
 		backup_path_files=None,
 		backup_path_private_files=None,
+		db_socket=None,
 		db_host=None,
 		db_port=None,
 		db_type=None,
@@ -60,6 +61,7 @@ class BackupGenerator:
 	):
 		global _verbose
 		self.compress_files = compress_files or compress
+		self.db_socket = db_socket
 		self.db_host = db_host
 		self.db_port = db_port
 		self.db_name = db_name
@@ -426,6 +428,7 @@ class BackupGenerator:
 		from frappe.database import get_command
 
 		bin, args, bin_name = get_command(
+			socket=self.db_socket,
 			host=self.db_host,
 			port=self.db_port,
 			user=self.user,
@@ -501,6 +504,7 @@ def fetch_latest_backups(partial=False) -> dict:
 		frappe.conf.db_name,
 		frappe.conf.db_user,
 		frappe.conf.db_password,
+		db_socket=frappe.conf.db_socket,
 		db_host=frappe.conf.db_host,
 		db_port=frappe.conf.db_port,
 		db_type=frappe.conf.db_type,
@@ -568,6 +572,7 @@ def new_backup(
 		frappe.conf.db_name,
 		frappe.conf.db_user,
 		frappe.conf.db_password,
+		db_socket=frappe.conf.db_socket,
 		db_host=frappe.conf.db_host,
 		db_port=frappe.conf.db_port,
 		db_type=frappe.conf.db_type,
diff --git a/frappe/utils/connections.py b/frappe/utils/connections.py
index 711c4d71f3..dcea7dfc0c 100644
--- a/frappe/utils/connections.py
+++ b/frappe/utils/connections.py
@@ -7,10 +7,13 @@ from frappe.exceptions import UrlSchemeNotSupported
 REDIS_KEYS = ("redis_cache", "redis_queue")
 
 
-def is_open(scheme, hostname, port, timeout=10):
+def is_open(scheme, hostname, port, path, timeout=10):
 	if scheme in ["redis", "postgres", "mariadb"]:
 		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 		conn = (hostname, int(port))
+	elif scheme == "unix":
+		s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
+		conn = path
 	else:
 		raise UrlSchemeNotSupported(scheme)
 
@@ -28,9 +31,12 @@ def is_open(scheme, hostname, port, timeout=10):
 def check_database():
 	config = get_conf()
 	db_type = config.get("db_type", "mariadb")
+	db_socket = config.get("db_socket")
+	if db_socket:
+		return {db_type: is_open("unix", None, None, db_socket)}
 	db_host = config.get("db_host", "127.0.0.1")
 	db_port = config.get("db_port", 3306 if db_type == "mariadb" else 5432)
-	return {db_type: is_open(db_type, db_host, db_port)}
+	return {db_type: is_open(db_type, db_host, db_port, None)}
 
 
 def check_redis(redis_services=None):
@@ -39,7 +45,7 @@ def check_redis(redis_services=None):
 	status = {}
 	for srv in services:
 		url = urlparse(config[srv])
-		status[srv] = is_open(url.scheme, url.hostname, url.port)
+		status[srv] = is_open(url.scheme, url.hostname, url.port, url.path)
 	return status
 
 
diff --git a/node_utils.js b/node_utils.js
index e237b14318..f7783cf868 100644
--- a/node_utils.js
+++ b/node_utils.js
@@ -50,13 +50,27 @@ function get_conf() {
 	if (process.env.FRAPPE_SOCKETIO_PORT) {
 		conf.socketio_port = process.env.FRAPPE_SOCKETIO_PORT;
 	}
+	if (process.env.FRAPPE_SOCKETIO_UDS) {
+		conf.socketio_uds = process.env.FRAPPE_SOCKETIO_UDS;
+	}
 	return conf;
 }
 
 function get_redis_subscriber(kind = "redis_queue", options = {}) {
 	const conf = get_conf();
-	const host = conf[kind];
-	return redis.createClient({ url: host, ...options });
+	const connStr = conf[kind];
+	let client;
+	// TODO: revise after https://github.com/redis/node-redis/issues/2530
+	// is solved for a more elegant implementation
+	if (connStr && connStr.startsWith("unix://")) {
+		client = redis.createClient({
+			socket: { path: connStr.replace("unix://", "") },
+			...options,
+		});
+	} else {
+		client = redis.createClient({ url: connStr, ...options });
+	}
+	return client;
 }
 
 module.exports = {
diff --git a/realtime/index.js b/realtime/index.js
index 2fc873b863..338a6a1956 100644
--- a/realtime/index.js
+++ b/realtime/index.js
@@ -1,9 +1,12 @@
 const { Server } = require("socket.io");
+const http = require("node:http");
 
 const { get_conf, get_redis_subscriber } = require("../node_utils");
 const conf = get_conf();
 
-let io = new Server({
+const server = http.createServer();
+
+let io = new Server(server, {
 	cors: {
 		// Should be fine since we are ensuring whether hostname and origin are same before adding setting listeners for s socket
 		origin: true,
@@ -55,6 +58,8 @@ const subscriber = get_redis_subscriber();
 })();
 // =======================
 
+let uds = conf.socketio_uds;
 let port = conf.socketio_port;
-io.listen(port);
-console.log("Realtime service listening on: ", port);
+server.listen(uds || port, () => {
+	console.log("Realtime service listening on: ", uds || port);
+});
