diff --git a/erpnext/erpnext_integrations/doctype/plaid_settings/plaid_connector.py b/erpnext/erpnext_integrations/doctype/plaid_settings/plaid_connector.py
index f44fad333c..779ca5c380 100644
--- a/erpnext/erpnext_integrations/doctype/plaid_settings/plaid_connector.py
+++ b/erpnext/erpnext_integrations/doctype/plaid_settings/plaid_connector.py
@@ -1,30 +1,44 @@
 # Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
 # For license information, please see license.txt
 
+import json
+
 import frappe
 import plaid
+import plaid.models
 import requests
 from frappe import _
-from plaid.errors import APIError, InvalidRequestError, ItemError
+from plaid.api import plaid_api
 
 
 class PlaidConnector:
+	environments = {
+		"sandbox": plaid.Environment.Sandbox,
+		"development": plaid.Environment.Development,
+		"production": plaid.Environment.Production,
+	}
+
 	def __init__(self, access_token=None):
 		self.access_token = access_token
 		self.settings = frappe.get_single("Plaid Settings")
 		self.products = ["transactions"]
 		self.client_name = frappe.local.site
-		self.client = plaid.Client(
-			client_id=self.settings.plaid_client_id,
-			secret=self.settings.get_password("plaid_secret"),
-			environment=self.settings.plaid_env,
-			api_version="2020-09-14",
+		self.configuration = plaid.Configuration(
+			host=self.environments[self.settings.plaid_env or "sandbox"],
+			api_key={
+				"clientId": self.settings.plaid_client_id,
+				"secret": self.settings.get_password("plaid_secret"),
+				"plaidVersion": "2020-09-14",
+			},
 		)
+		self.api_client = plaid.ApiClient(self.configuration)
+		self.client = plaid_api.PlaidApi(self.api_client)
 
 	def get_access_token(self, public_token):
 		if public_token is None:
 			frappe.log_error("Plaid: Public token is missing")
-		response = self.client.Item.public_token.exchange(public_token)
+		request = plaid.models.ItemPublicTokenExchangeRequest(public_token)
+		response = self.client.item_public_token_exchange(request)
 		access_token = response["access_token"]
 		return access_token
 
@@ -38,8 +52,10 @@ class PlaidConnector:
 			"client_name": self.client_name,
 			# only allow Plaid-supported languages and countries (LAST: Sep-19-2020)
 			"language": frappe.local.lang if frappe.local.lang in ["en", "fr", "es", "nl"] else "en",
-			"country_codes": country_codes,
-			"user": {"client_user_id": frappe.generate_hash(frappe.session.user, length=32)},
+			"country_codes": [plaid.models.CountryCode(cc) for cc in country_codes],
+			"user": plaid.models.LinkTokenCreateRequestUser(
+				client_user_id=frappe.generate_hash(frappe.session.user, length=32)
+			),
 		}
 
 		if update_mode:
@@ -49,7 +65,7 @@ class PlaidConnector:
 				{
 					"client_id": self.settings.plaid_client_id,
 					"secret": self.settings.plaid_secret,
-					"products": self.products,
+					"products": [plaid.models.Products(p) for p in self.products],
 				}
 			)
 
@@ -59,47 +75,70 @@ class PlaidConnector:
 		token_request = self.get_token_request(update_mode)
 
 		try:
-			response = self.client.LinkToken.create(token_request)
-		except InvalidRequestError:
-			frappe.log_error("Plaid: Invalid request error")
-			frappe.msgprint(_("Please check your Plaid client ID and secret values"))
-		except APIError as e:
-			frappe.log_error("Plaid: Authentication error")
-			frappe.throw(_(str(e)), title=_("Authentication Failed"))
+			request = plaid.models.LinkTokenCreateRequest(**token_request)
+			response = self.client.link_token_create(request)
+		except plaid.ApiException as e:
+			response = json.loads(e.body)
+			if response["error_code"] == "ITEM_LOGIN_REQUIRED":
+				pass
+			elif response["error_code"] == "PLANNED_MAINTENANCE":
+				pass
+			elif response["error_type"] == "INVALID_REQUEST":
+				frappe.log_error("Plaid: Invalid request error")
+				frappe.msgprint(_("Please check your Plaid client ID and secret values"))
+			else:
+				frappe.log_error("Plaid: Authentication error")
+				frappe.throw(_(str(e)), title=_("Authentication Failed"))
 		else:
 			return response["link_token"]
 
 	def auth(self):
 		try:
-			self.client.Auth.get(self.access_token)
-		except ItemError as e:
-			if e.code == "ITEM_LOGIN_REQUIRED":
+			request = plaid.models.AuthGetRequest(self.access_token)
+			self.client.auth_get(request)
+		except plaid.ApiException as e:
+			response = json.loads(e.body)
+			if response["error_code"] == "ITEM_LOGIN_REQUIRED":
 				pass
-		except APIError as e:
-			if e.code == "PLANNED_MAINTENANCE":
+			elif response["error_code"] == "PLANNED_MAINTENANCE":
 				pass
+			else:
+				frappe.log_error("Plaid: Authentication error")
+				frappe.throw(_(str(e)), title=_("Authentication Failed"))
 		except requests.Timeout:
 			pass
-		except Exception as e:
-			frappe.log_error("Plaid: Authentication error")
-			frappe.throw(_(str(e)), title=_("Authentication Failed"))
 
 	def get_transactions(self, start_date, end_date, account_id=None):
 		self.auth()
 		kwargs = dict(access_token=self.access_token, start_date=start_date, end_date=end_date)
 		if account_id:
-			kwargs.update(dict(account_ids=[account_id]))
+			kwargs.update(
+				dict(
+					options=plaid.models.TransactionsGetRequestOptions(
+						account_ids=[account_id],
+					)
+				)
+			)
 
 		try:
-			response = self.client.Transactions.get(**kwargs)
+			request = plaid.models.TransactionsGetRequest(**kwargs)
+			response = self.client.transactions_get(request)
 			transactions = response["transactions"]
 			while len(transactions) < response["total_transactions"]:
-				response = self.client.Transactions.get(
-					self.access_token, start_date=start_date, end_date=end_date, offset=len(transactions)
+				request = plaid.models.TransactionsGetRequest(
+					self.access_token,
+					start_date=start_date,
+					end_date=end_date,
+					options=plaid.models.TransactionsGetRequestOptions(
+						offset=len(transactions),
+					),
 				)
+				response = self.client.transactions_get(request)
 				transactions.extend(response["transactions"])
 			return transactions
-		except ItemError as e:
-			raise e
-		except Exception:
-			frappe.log_error("Plaid: Transactions sync error")
+		except plaid.ApiException as e:
+			response = json.loads(e.body)
+			if response["error_code"] == "ITEM_LOGIN_REQUIRED":
+				raise response
+			else:
+				frappe.log_error("Plaid: Transactions sync error")
[1mmodified: [0m[1;35m/tmp/git-blob-aV7UPf/[0m[1;95mplaid_settings.json[0m                                                                                                                                  
                                                                                                                                                                                    
                                                                                                                                                                                    
diff --git a/erpnext/erpnext_integrations/doctype/plaid_settings/plaid_settings.py b/erpnext/erpnext_integrations/doctype/plaid_settings/plaid_settings.py
index ec7d71e997..0486c20737 100644
--- a/erpnext/erpnext_integrations/doctype/plaid_settings/plaid_settings.py
+++ b/erpnext/erpnext_integrations/doctype/plaid_settings/plaid_settings.py
@@ -4,11 +4,11 @@
 import json
 
 import frappe
+import plaid
 from frappe import _
 from frappe.desk.doctype.tag.tag import add_tag
 from frappe.model.document import Document
 from frappe.utils import add_months, formatdate, getdate, sbool, today
-from plaid.errors import ItemError
 
 from erpnext.accounts.doctype.journal_entry.journal_entry import get_default_bank_cash_account
 from erpnext.erpnext_integrations.doctype.plaid_settings.plaid_connector import PlaidConnector
@@ -34,8 +34,8 @@ class PlaidSettings(Document):
 	@staticmethod
 	@frappe.whitelist()
 	def get_link_token():
-		plaid = PlaidConnector()
-		return plaid.get_link_token()
+		plaid_connector = PlaidConnector()
+		return plaid_connector.get_link_token()
 
 
 @frappe.whitelist()
@@ -55,8 +55,8 @@ def get_plaid_configuration():
 def add_institution(token, response):
 	response = json.loads(response)
 
-	plaid = PlaidConnector()
-	access_token = plaid.get_access_token(token)
+	plaid_connector = PlaidConnector()
+	access_token = plaid_connector.get_access_token(token)
 	bank = None
 
 	if not frappe.db.exists("Bank", response["institution"]["name"]):
@@ -224,15 +224,16 @@ def get_transactions(bank, bank_account=None, start_date=None, end_date=None):
 		access_token = frappe.db.get_value("Bank", bank, "plaid_access_token")
 		account_id = None
 
-	plaid = PlaidConnector(access_token)
+	plaid_connector = PlaidConnector(access_token)
 
 	transactions = []
 	try:
-		transactions = plaid.get_transactions(
+		transactions = plaid_connector.get_transactions(
 			start_date=start_date, end_date=end_date, account_id=account_id
 		)
-	except ItemError as e:
-		if e.code == "ITEM_LOGIN_REQUIRED":
+	except plaid.ApiException as e:
+		response = json.loads(e.body)
+		if response["error_code"] == "ITEM_LOGIN_REQUIRED":
 			msg = _("There was an error syncing transactions.") + " "
 			msg += _("Please refresh or reset the Plaid linking of the Bank {}.").format(bank) + " "
 			frappe.log_error(message=msg, title=_("Plaid Link Refresh Required"))
diff --git a/pyproject.toml b/pyproject.toml
index 8a0f12c5f5..c30e64c0d4 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -17,7 +17,7 @@ dependencies = [
 
     # integration dependencies
     "googlemaps",
-    "plaid-python~=7.2.1",
+    "plaid-python~=14.1.0",
     "python-youtube~=0.8.0",
 
     # Not used directly - required by PyQRCode for PNG generation
